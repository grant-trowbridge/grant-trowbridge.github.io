<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Grant Trowbridge&apos;s Blog</title>
    <description>Cybersecurity blog covering security-related topics, CTFs, and signals
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 30 Jul 2025 21:10:31 -0400</pubDate>
    <lastBuildDate>Wed, 30 Jul 2025 21:10:31 -0400</lastBuildDate>
    <generator>Jekyll v3.9.4</generator>
    
      <item>
        <title>Proving Grounds Craft: Walkthrough</title>
        <description>&lt;p&gt;This post provides a step-by-step walkthrough of the Proving Grounds machine Craft. I decided to write up the entire machine because it is a great example of how enabled content in documents can be weaponized against an end user. Ever wonder why you sometimes see a word doc banner saying macros have been disabled? This machine is the answer. As always, for anyone working through the PG practice machines, spoilers are ahead!&lt;/p&gt;

&lt;h1&gt;Enumeration&lt;/h1&gt;

&lt;p&gt;I&amp;#39;ll start by kicking off an &lt;code&gt;nmap&lt;/code&gt; scan of all 65535 TCP ports to see what we&amp;#39;re working with.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Nmap-Tcp-Scan-1.png&quot; alt=&quot;nmap TCP Scan 1&quot;&gt;&lt;/p&gt;

&lt;p&gt;It looks like the target is blocking ICMP packets. Not a problem, &lt;code&gt;nmap&lt;/code&gt; can be instructed to skip host discovery using the &lt;code&gt;-Pn&lt;/code&gt; flag. Let&amp;#39;s try that again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Nmap-Tcp-Scan-2.png&quot; alt=&quot;nmap TCP Scan 2&quot;&gt;&lt;/p&gt;

&lt;p&gt;The scan only returned port 80, which is serving some sort of HTTP service. Let&amp;#39;s gather more information about this service with an aggressive scan.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Nmap-Tcp-Scan-3.png&quot; alt=&quot;nmap TCP Scan 3&quot;&gt;&lt;/p&gt;

&lt;p&gt;The scan didn&amp;#39;t return anything too noteworthy, but I&amp;#39;ll jot down the service names and versions to research later. As a side note, make sure to enumerate UDP ports as well. In this particular case, the scan didn&amp;#39;t return any ports.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Nmap-Udp-Scan.png&quot; alt=&quot;nmap UDP Scan&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Web Application Enumeration&lt;/h2&gt;

&lt;p&gt;HTTP(S) services call for directory/file brute forcing. I&amp;#39;ll use the &lt;code&gt;gobuster&lt;/code&gt; &lt;strong&gt;dir&lt;/strong&gt; mode and provide the &lt;code&gt;-x&lt;/code&gt; flag to specify the file extensions I want to test. It doesn&amp;#39;t take long to find some interesting stuff like &lt;code&gt;/uploads&lt;/code&gt; and &lt;code&gt;/upload.php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Gobuster-Scan.png&quot; alt=&quot;gobuster Scan&quot;&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll browse out to the root directory in Firefox to see what the rendered page looks like. Google Translate wasn&amp;#39;t any help, but it&amp;#39;s safe to assume that this is some sort of business website. Further down the page, I found an upload feature for submitting resumes!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Craft-Landing-Page.png&quot; alt=&quot;Craft Landing Page&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Craft-Upload.png&quot; alt=&quot;Craft Upload&quot;&gt;&lt;/p&gt;

&lt;p&gt;To test the upload function, I will provide a simple text file to see what happens. It appears this &lt;code&gt;upload.php&lt;/code&gt; file checks the file extension to ensure only &lt;code&gt;.odt&lt;/code&gt; files are allowed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Craft-Upload-Test-1.png&quot; alt=&quot;Craft Upload Test 1&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Craft-Upload-Test-2.png&quot; alt=&quot;Craft Upload Test 2&quot;&gt;&lt;/p&gt;

&lt;p&gt;Now it&amp;#39;s time to enlist the help of BurpSuite to modify the POST request. I spent a lot of time messing with different PHP file extensions and some null byte shenanigans, but nothing worked. If I want to upload a file to this web server, it must have a &lt;code&gt;.odt&lt;/code&gt; file extension.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Craft-Upload-BurpSuite.png&quot; alt=&quot;Craft Upload BurpSuite&quot;&gt;&lt;/p&gt;

&lt;h2&gt;.odt File Research &amp;amp; Creation&lt;/h2&gt;

&lt;p&gt;Having created malicous Office 365 macros in the past, I assume LibreOffice may have similar functions that can be abused. I did some Googling and found this &lt;a href=&quot;https://medium.com/@akshay__0/initial-access-via-malicious-odt-macro-ac7f5d15796d&quot;&gt;Medium article&lt;/a&gt; detailing malicious &lt;code&gt;.odt&lt;/code&gt; file macros. The syntax for this macro is specific to Linux machines, so the script itself is not useful to me, but the instructions for creating a LibreOffice macro are still of value.&lt;/p&gt;

&lt;p&gt;Knowing this, I searched for Microsoft VBA Macro reverse shell scripts and found another &lt;a href=&quot;https://medium.com/@mavrogiannispan/phishing-2-0-9f49654de4a6&quot;&gt;Medium Article&lt;/a&gt; written by Mavrogiannis Panagiotis that contained proper syntax for Windows targets. First, I need to create a malicious document in LibreOffice. Select &lt;strong&gt;File &amp;gt; New &amp;gt; Text Document&lt;/strong&gt; to create a new file. Once the document window opens, navigate to &lt;strong&gt;File &amp;gt; Save As..&lt;/strong&gt; and save the file, ensuring the &lt;code&gt;.odt&lt;/code&gt; extension is specified.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Odt-Step-1.png&quot; alt=&quot;Odt Step 1&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Odt-Step-2.png&quot; alt=&quot;Odt Step 2&quot;&gt;&lt;/p&gt;

&lt;p&gt;Next, I will select &lt;strong&gt;Tools &amp;gt; Macros &amp;gt; Organize Macros &amp;gt; Basic...&lt;/strong&gt; to open up the &lt;em&gt;BASIC Macros&lt;/em&gt; window. In the window, select the name of the saved document and then click the &lt;strong&gt;New&lt;/strong&gt; button on the right-hand side to create a new module. In the pop-up window, provide a name for the module and click &lt;strong&gt;Ok&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Odt-Step-3.png&quot; alt=&quot;Odt Step 3&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Odt-Step-4.png&quot; alt=&quot;Odt Step 4&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Odt-Step-5.png&quot; alt=&quot;Odt Step 5&quot;&gt;&lt;/p&gt;

&lt;p&gt;Now I can copy the script structure from the Medium article and paste it into the macro window.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Odt-Step-6.png&quot; alt=&quot;Odt Step 6&quot;&gt;&lt;/p&gt;

&lt;p&gt;You may have noticed that I left out the entire string from the &lt;code&gt;objshell.Run&lt;/code&gt; line. I am slightly modifying the VBA script example by generating a PowerShell Base64-encoded reverse shell command using &lt;code&gt;msfvenom&lt;/code&gt;. I prefer this format because I don&amp;#39;t have to fiddle with quotations within quotations, which can be a headache at times. I&amp;#39;ll copy everything starting from &lt;code&gt;powershell.exe&lt;/code&gt; and paste into the empty double quotes in my script.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Odt-Step-7.png&quot; alt=&quot;Odt Step 7&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Odt-Step-8.png&quot; alt=&quot;Odt Step 8&quot;&gt;&lt;/p&gt;

&lt;p&gt;The last step is to tie this macro to an event. I want this script to execute immediately after the document is opened. To do this, I&amp;#39;ll navigate to &lt;strong&gt;Tools &amp;gt; Customize&lt;/strong&gt;. Inside the &lt;em&gt;Customize&lt;/em&gt; window, click the  &lt;strong&gt;Events&lt;/strong&gt; button, select the &lt;strong&gt;Open Document&lt;/strong&gt; event, and click &lt;strong&gt;Macro...&lt;/strong&gt; on the right-hand side.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Odt-Step-9.png&quot; alt=&quot;Odt Step 9&quot;&gt;&lt;/p&gt;

&lt;p&gt;Expand the document tree until you find the macro name and select it. Click &lt;strong&gt;Ok&lt;/strong&gt; on the &lt;em&gt;Macro Selector&lt;/em&gt; and &lt;em&gt;Customize&lt;/em&gt; windows. Once back in the document window, press &lt;code&gt;Ctrl + S&lt;/code&gt; one more time for good measure and close LibreOffice.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Odt-Step-10.png&quot; alt=&quot;Odt Step 10&quot;&gt;&lt;/p&gt;

&lt;h1&gt;Initial Access&lt;/h1&gt;

&lt;p&gt;Now it&amp;#39;s time to upload the &lt;code&gt;.odt&lt;/code&gt; file. Before I do that, I first need to setup a listener on Kali to catch the reverse shell connection. I am prepending my &lt;code&gt;nc&lt;/code&gt; command with &lt;code&gt;rlwrap&lt;/code&gt; which will help stabilize the Windows shell.&lt;/p&gt;

&lt;p&gt;Browse out to the root web directory again, select the saved &lt;code&gt;.odt&lt;/code&gt; file, and click the &lt;strong&gt;Upload&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_InitialAccess-Step-1.png&quot; alt=&quot;InitialAccess Step 1&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_InitialAccess-Step-2.png&quot; alt=&quot;InitialAccess Step 2&quot;&gt;&lt;/p&gt;

&lt;p&gt;After a few seconds pass, a reverse shell is received from the target!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_InitialAccess-Step-3.png&quot; alt=&quot;InitiAccess Step 3&quot;&gt;&lt;/p&gt;

&lt;h1&gt;Post-Exploitation Enumeration&lt;/h1&gt;

&lt;p&gt;Let&amp;#39;s see if there are any flags we can access as &lt;strong&gt;thecybergeek&lt;/strong&gt;. This is a PowerShell one-liner that I use to scrape flag content in the &lt;code&gt;C:\Users\&lt;/code&gt; directory.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;Get-ChildItem&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;C:\Users\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;local.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;proof.txt&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Recurse&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-ErrorAction&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SilentlyContinue&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write-Host&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[!] &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$PSItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FullName&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;`r`n`t&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-Content&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$PSItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Local.png&quot; alt=&quot;Local&quot;&gt;&lt;/p&gt;

&lt;p&gt;Local is now captured! Moving onto further enumeration, I&amp;#39;ll start with examining service information to check for any unquoted service paths using another PowerShell one-liner.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;Get-CimInstance&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-ClassName&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;win32_service&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PathName&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Where-Object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$PSItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-eq&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Running&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I immediately notice a custom service named &lt;strong&gt;ResumeService1&lt;/strong&gt; with an unquoted service path of &lt;code&gt;C:\Program Files\nssm-2.24\win64\nssm.exe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Post-Exploit-Enum-Unquoted-1.png&quot; alt=&quot;Post Exploit Enum 1&quot;&gt;&lt;/p&gt;

&lt;p&gt;If my current user has write access to the &lt;code&gt;C:\&lt;/code&gt; directory, I could place a malicious executable there, restart the service, and send myself an NT Authority\SYSTEM shell (assuming it is running with SYSTEM privileges). Unfortunately, my user cannot create files in that directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Post-Exploit-Enum-Unquoted-2.png&quot; alt=&quot;Post Exploit Enum 2&quot;&gt;&lt;/p&gt;

&lt;p&gt;I didn&amp;#39;t find anything noteworthy my current user&amp;#39;s home directory, nor do I have any interesting privileges. I decided to enumerate all of the users on the target and noticed an &lt;strong&gt;apache&lt;/strong&gt; username. What if I have write access to the Apache root directory?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Post-Exploit-Enum-Apache-1.png&quot; alt=&quot;Post Exploit Enum Apache 1&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Lateral Movement&lt;/h2&gt;

&lt;p&gt;To find the root directory, I remembered from my &lt;code&gt;gobuster&lt;/code&gt; enumeration that I found a file called &lt;code&gt;upload.php&lt;/code&gt;. I can search for that filename to locate the root directory of the Apache web server. Once I discovered the &lt;code&gt;C:\xampp\htdocs\&lt;/code&gt; root directory, I attempted to write a text file to that location and it worked! I further verified this by curling the new web server file from Kali.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;Get-ChildItem&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;C:\&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Filter&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;upload.php&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Recurse&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-File&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-ErrorAction&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SilentlyContinue&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$PSItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Post-Exploit-Enum-Apache-2.png&quot; alt=&quot;Post Exploit Enum Apache 2&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Post-Exploit-Enum-Apache-3.png&quot; alt=&quot;Post Exploit Enum Apache 3&quot;&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve confirmed my write access on the Apache web server. Now I just need to write a PHP backdoor file instead of a text file. I&amp;#39;ll host the &lt;code&gt;simple-backdoor.php&lt;/code&gt; file from Kali using a Python HTTP server and download the file using the &lt;code&gt;Invoke-WebRequest&lt;/code&gt; Cmdlet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Post-Exploit-Enum-Apache-4.png&quot; alt=&quot;Post Exploit Enum Apache 4&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Post-Exploit-Enum-Apache-5.png&quot; alt=&quot;Post Exploit Enum Apache 5&quot;&gt;&lt;/p&gt;

&lt;p&gt;I now have code execution as &lt;strong&gt;apache&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Post-Exploit-Enum-Apache-6.png&quot; alt=&quot;Post Exploit Enum Apache 6&quot;&gt;&lt;/p&gt;

&lt;p&gt;Following the same form as the &lt;code&gt;.odt&lt;/code&gt; file macro, I&amp;#39;ll once again lean on &lt;code&gt;msfvenom&lt;/code&gt; to generate a PowerShell Base64-encoded reverse shell command to avoid URL encoding shenanigans. I can&amp;#39;t avoid URL encoding entirely, I&amp;#39;ll need to replace the spaces in my command with either &lt;code&gt;%20&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt; characters to make the URL valid. If you are entering this command from the browser, this step will be automated. Don&amp;#39;t forget to setup the &lt;code&gt;nc&lt;/code&gt; listener on Kali before executing the command!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Post-Exploit-Enum-Apache-7.png&quot; alt=&quot;Post Exploit Enum Apache 7&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Post-Exploit-Enum-Apache-8.png&quot; alt=&quot;Post Exploit Enum Apache 8&quot;&gt;&lt;/p&gt;

&lt;p&gt;I now have a shell as the &lt;strong&gt;apache&lt;/strong&gt; user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Post-Exploit-Enum-Apache-9.png&quot; alt=&quot;Post Exploit Enum Apache 9&quot;&gt;&lt;/p&gt;

&lt;h1&gt;Privilege Escalation&lt;/h1&gt;

&lt;p&gt;Full disclosure, I hit a mental roadblock on privilege escalation for a good while. The first rabbit hole I fell down was the &lt;code&gt;C:\output.txt&lt;/code&gt; file produced by a PowerShell script using the &lt;code&gt;Start-Transcript&lt;/code&gt; Cmdlet. In the generated transcription banner, it references the PowerShell script used, which was &lt;code&gt;C:\freezeScript\win10.ps1&lt;/code&gt;. I created a PowerShell reverse shell script under the same path and name, hoping this was some sort of scheduled task, but I never received a shell.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_PrivEsc-Output-File.png&quot; alt=&quot;Priv Esc Output File&quot;&gt;&lt;/p&gt;

&lt;p&gt;The next rabbit hole was focusing on &lt;strong&gt;apache&amp;#39;s&lt;/strong&gt; Full Control permissions on the Apache service itself, &lt;code&gt;C:\xampp\apache\bin\httpd.exe&lt;/code&gt;. I had the same thought process from when I noticed the &lt;code&gt;ResumeService1&lt;/code&gt; service, only this time it wasn&amp;#39;t related to an unquoted path, but the ability overwrite the service executable itself. Then I realized I couldn&amp;#39;t overwrite a file currently being used by another process. Simple, I can just stop the service right?&lt;/p&gt;

&lt;p&gt;Nope. My user doesn&amp;#39;t have the required permissions to stop the service.&lt;/p&gt;

&lt;p&gt;Even if I could, I would likely cut off my current access because this shell resulted from a PHP backdoor located on the web server, and is therefore a child process of that service. This means there is a chance that the child process would also be killed, though there are exceptions in Windows. Regardless, overwriting the Apache executable is not an option.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_PrivEsc-Apache-Service-1.png&quot; alt=&quot;Priv Esc Apache Service 1&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_PrivEsc-Apache-Service-2.png&quot; alt=&quot;Priv Esc Apache Service 2&quot;&gt;&lt;/p&gt;

&lt;p&gt;Well I&amp;#39;ve laterally moved to a new user, what if I have new permissions? I listed them with &lt;code&gt;whoami /priv&lt;/code&gt; and immediately noticed the enabled Impersonate privilege. This privilege is likely vulnerable to the Potato family of exploits, RogueWinRM, or &lt;a href=&quot;https://github.com/itm4n/PrintSpoofer&quot;&gt;PrintSpoofer&lt;/a&gt;. I chose PrintSpoofer because the readme clearly states it is applicable to Windows Server 2019, which matches the target OS version.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_PrivEsc-Impersonate.png&quot; alt=&quot;PrivEsc Impersonate&quot;&gt;&lt;/p&gt;

&lt;p&gt;After downloading the PrintSpoofer exploit onto Kali, I served it using the same Python HTTP server as before and downloaded the executable onto the target with the &lt;code&gt;Invoke-WebRequest&lt;/code&gt; Cmdlet. Once downloaded, all that is left to do is to execute it with the following flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt;: Interact with the process in the current shell&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-c&lt;/code&gt;: Command to execute&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With a SYSTEM shell, I can now capture the proof flag and consider this machine rooted!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-Craft-Walkthrough_Proof.png&quot; alt=&quot;PrivEsc PrintSpoofer&quot;&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Jul 2025 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2025/PG-Craft-Walkthrough/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/PG-Craft-Walkthrough/</guid>
        
        
      </item>
    
      <item>
        <title>Proving Grounds SPX: Privilege Escalation</title>
        <description>&lt;p&gt;As I progress through &lt;a href=&quot;https://docs.google.com/spreadsheets/u/1/d/1dwSMIAPIam0PuRBkCiDI88pU3yzrqqHkDtBngUHNCw8/htmlview&quot;&gt;TJ Null&amp;#39;s OSCP PWK V3 list&lt;/a&gt;, I wanted to cover a particular machine that had a very unique privilege escalation vulnerability. The machine in question is SPX. I&amp;#39;ll skip over initial access for the sake of brevity and limiting spoilers. Speaking of spoilers, you&amp;#39;ve been warned!&lt;/p&gt;

&lt;h1&gt;Identifying the Vulnerability&lt;/h1&gt;

&lt;p&gt;Once I had my initial footfold into the machine, and gained access to a local user account, my immediate thought was:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;what privileges do I have in this new user context?&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;After some manual enumeration, I eventually found the answer. A sudo command for the &lt;code&gt;make&lt;/code&gt; binary:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-SPX-PrivEsc_Sudo-Cmd.png&quot; alt=&quot;profiler sudo privileges&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Research&lt;/h2&gt;

&lt;p&gt;Anytime I come across a specific Unix binary with special permissions (&lt;code&gt;sudo&lt;/code&gt; in this case), I always consult the &lt;a href=&quot;https://gtfobins.github.io/gtfobins/make/#sudo&quot;&gt;GTFOBins&lt;/a&gt; GitHub Pages site.&lt;/p&gt;

&lt;p&gt;Initially, it looked like I had an easy win here, but I do not have access to the &lt;code&gt;-s&lt;/code&gt; and &lt;code&gt;--eval&lt;/code&gt; flags shown in the example GTFOBins code snippet. The target&amp;#39;s whitelisted command from the &lt;code&gt;sudo -l&lt;/code&gt; output was &lt;code&gt;/usr/bin/make install -C /home/profiler/php-spx&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-SPX-PrivEsc_Make-GTFOBin.png&quot; alt=&quot;GTFOBin Research&quot;&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll be honest, I was stumped on this problem for a good hour or so. I decided to thoroughly enumerate the rest of the system. I was convinced I missed something somewhere. Eventually, I realized the &lt;code&gt;sudo&lt;/code&gt; permission for this user was the obvious privilege escalation vulnerability. It was my only access to command execution as &lt;em&gt;root&lt;/em&gt; on the target.&lt;/p&gt;

&lt;h3&gt;Even More Research&lt;/h3&gt;

&lt;p&gt;Having used the &lt;code&gt;make&lt;/code&gt; utility in the past, I knew it called on instructions specified in a &lt;code&gt;Makefile&lt;/code&gt;. I searched for &lt;code&gt;Makefile&lt;/code&gt; exploits/privilege escalation techniques. Googling this topic eventually led me to this &lt;a href=&quot;https://medium.com/@adamforsythebartlett/makefile-privilege-escalation-oscp-62ea2c666d23&quot;&gt;Medium&lt;/a&gt; article, written by one Adam Bartlett. He explains that &lt;code&gt;make&lt;/code&gt; can be used to execute bash commands when the target directory is specified using the &lt;code&gt;-C&lt;/code&gt; flag.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The “make” command looks for a file called “Makefile”. If you’re looking for code execution, make sure you’re running “make” in the location where “Makefile” is executed, or specify the directory using the -C flag.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is the malicious syntax for bash execution provided in the article.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-SPX-PrivEsc_Make-Medium-Blog.png&quot; alt=&quot;Medium Article Example&quot;&gt;&lt;/p&gt;

&lt;h1&gt;Crafting the Makefile&lt;/h1&gt;

&lt;p&gt;Now it&amp;#39;s time to match the example to the target system. I always like to start by making a backup of a file I&amp;#39;m modifying. It&amp;#39;s not a requirement by any means, but it&amp;#39;s a good habit to have.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-&quot; data-lang=&quot;&quot;&gt;profiler@spx:/var/www/html$ cd ~/php-spx/
profiler@spx:~/php-spx$ cp Makefile ./Makefile.bak
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There&amp;#39;s many different bash techniques that can be used to spawn a &lt;em&gt;root&lt;/em&gt; shell in this scenario. I chose to create a malicous copy of bash with an SUID bit. When a standard user executes this bash copy with a &lt;code&gt;-p&lt;/code&gt; flag, it tells bash to not reset the effective user ID with my real user ID. In short, bash will run with the file owner&amp;#39;s permissions (&lt;em&gt;root&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-SPX-PrivEsc_New-Makefile.png&quot; alt=&quot;Malicious Makefile&quot;&gt;&lt;/p&gt;

&lt;h1&gt;Escalating Privileges&lt;/h1&gt;

&lt;p&gt;With the malicious &lt;code&gt;Makefile&lt;/code&gt; in place, it&amp;#39;s simply a matter of executing the allowed &lt;code&gt;sudo&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-SPX-PrivEsc_Sudo-Make-Exploit.png&quot; alt=&quot;Sudo Make Exploit&quot;&gt;&lt;/p&gt;

&lt;p&gt;Now I&amp;#39;ll execute the new &lt;code&gt;/tmp/evil&lt;/code&gt; bash binary, ensuring the &lt;code&gt;-p&lt;/code&gt; flag is provided to spawn a &lt;em&gt;root&lt;/em&gt; shell!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-SPX-PrivEsc_Bash-Privilege-Escalation.png&quot; alt=&quot;Evil Bash Binary&quot;&gt;&lt;/p&gt;

&lt;h1&gt;Lessons Learned&lt;/h1&gt;

&lt;p&gt;The very specific &lt;code&gt;sudo&lt;/code&gt; command was a great starting point for securing the system, but the true vulnerability lies in the specified directory&amp;#39;s permissions, &lt;code&gt;/home/profiler/php-spx&lt;/code&gt;. The standard user &lt;em&gt;profiler&lt;/em&gt; had &lt;strong&gt;write&lt;/strong&gt; access to the directory, and as a result, write access to the &lt;code&gt;Makefile&lt;/code&gt; itself. If the directory prevented the &lt;em&gt;profiler&lt;/em&gt; user from having write access, there would be no opportunity to escalate privileges.&lt;/p&gt;

&lt;p&gt;This machine was an excellent reminder that the devil is always in the details, and file permissions matter!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/PG-SPX-PrivEsc_Lessons-Learned.png&quot; alt=&quot;Lessons Learned&quot;&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Jul 2025 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2025/PG-SPX-PrivEsc/</link>
        <guid isPermaLink="true">http://localhost:4000/2025/PG-SPX-PrivEsc/</guid>
        
        
      </item>
    
  </channel>
</rss>
